type BasePaginationMeta {
  itemCount: Float!
  totalItems: Float!
  itemsPerPage: Float!
  totalPages: Float!
  currentPage: Float!
}

type User implements Node {
  id: Float!
  name: String!
  nickname: String!
  intro: String!
  zaloId: String!
  avatar: Float
  isNew: Boolean!
  blocked: [Float!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  avatarFilePath: String
  isRequestFollowMe: Boolean!
  followStatus: FollowStatus
  nFollowing: [User!]
  nFollower: [User!]
}

"""
Node
"""
interface Node {
  id: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum FollowStatus {
  IS_ME
  WAITING
  ACCEPT
}

type UserConnection {
  items: [User!]
  meta: BasePaginationMeta!
}

type Notification implements Node {
  id: Float!
  triggerId: Float!
  userId: Float!
  content: String!
  link: String!
  isSeen: Boolean!
  createdAt: DateTime!
  triggerInfo: User!
}

type NotificationConnection {
  items: [Notification!]
  meta: BasePaginationMeta!
}

type Follow implements Node {
  id: Float!
  creatorId: Float!
  followUser: Float!
  status: FollowStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  requestInfo: User!
}

type FollowConnection {
  items: [Follow!]
  meta: BasePaginationMeta!
}

type Media implements Node {
  id: Float!
  fileSize: Int
  name: String!
  filePath: String
  mimeType: String
  isDeleted: Boolean!
  type: FileType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum FileType {
  FILE
  DIR
}

type MediaConnection {
  items: [Media!]
  meta: BasePaginationMeta!
}

"""
AuthConnection
"""
type AuthConnection {
  accessToken: String
  refreshToken: String
  user: User!
}

type Post implements Node {
  id: Float!
  creatorId: Float!
  medias: [Float!]
  caption: String
  rawCaption: String
  createdAt: DateTime!
  updatedAt: DateTime!
  totalLike: Float!
  isLike: Boolean!
  mediasPath: [Media!]
  creatorInfo: User
}

type PostConnection {
  items: [Post!]
  meta: BasePaginationMeta!
}

type Comments implements Node {
  id: Float!
  creatorId: Float!
  postId: Float!
  parentId: Float!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  creatorInfo: User!
}

type CommentDeletePayload {
  id: Float!
  postId: Float!
}

type CommentConnection {
  items: [Comments!]
  meta: BasePaginationMeta!
}

type Like implements Node {
  id: Float!
  postId: Float!
  userId: Float!
  createdAt: DateTime!
  creatorInfo: User!
  postInfo: Post!
}

type Query {
  me: User!
  getUserInfo(id: Float!): User
  searchUser(page: Float!, limit: Float!, isRestricted: Boolean = false, keyword: String!): UserConnection!
  isAvailable(nickname: String!): Boolean!
  getBlockedUser: [User!]
  medias(limit: Int = 15, page: Int = 1, parentId: String): MediaConnection
  media(id: Float!): Media
  getNotification(page: Float!, limit: Float!): NotificationConnection!
  countUnSeenNotification: Float!
  getFollowRequest(page: Float!, limit: Float!): FollowConnection!
  countFollowRequest: Float!
  getUserLikePost(postId: Float!): [User!]!
  getPostComment(page: Float!, limit: Float!, postId: Float!): CommentConnection!
  getNewFeed(limit: Int = 15, page: Int = 1): PostConnection!
  getExplorePost(page: Float!, limit: Float!): PostConnection!
  getPostDetail(id: Float!): Post!
  myPost(page: Float!, limit: Float!): PostConnection!
  getUserPost(page: Float!, limit: Float!, userId: Float!): PostConnection!
}

type Mutation {
  updateUserInfo(input: UpdateUserInput!): User!
  blockUser(id: Float!): User!
  unBlockUser(id: Float!): User!
  uploadMedia(provider: String = "LOCAL", parentId: ID, file: Upload!): Media!
  uploadMediaToS3(parentId: ID, file: Upload!): Media!
  removeMedia(id: ID): Media!
  updateMedia(input: UpdateMediaInput!): Media!
  createDir(parentId: ID, dirName: String!): Media!
  setSeenNotification: Boolean!
  FollowUser(id: Float!): Boolean!
  UnFollowUser(id: Float!): Boolean!
  handleFollowRequest(accept: Boolean!, userId: Float!): Boolean!
  loginWithSNS(input: NewUserInput!): AuthConnection!
  logout: Boolean!
  createComment(input: CreateCommentInput!): Comments!
  updateComment(input: UpdateCommentInput!): Comments!
  removeComment(postId: Float!, id: Float!): Boolean!
  createPost(input: CreatePostInput!): Post!
  updatePost(input: UpdatePostInput!): Post!
  removePost(id: Float!): Boolean!
  reactToPost(postId: Float!): Boolean!
  reportPost(postId: Float!): Boolean!
}

input UpdateUserInput {
  zaloId: String
  name: String
  nickname: String
  intro: String = ""
  avatar: Float
  avatarUrl: String
  isNew: Boolean = true
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input UpdateMediaInput {
  id: ID!
  name: String!
}

input NewUserInput {
  zaloId: String
  name: String
  nickname: String
  intro: String = ""
  avatar: Float
  avatarUrl: String
  isNew: Boolean = true
}

input CreateCommentInput {
  content: String!
  parentId: Float = 0
  postId: Float!
}

input UpdateCommentInput {
  content: String!
  parentId: Float = 0
  postId: Float!
  id: Float!
}

input CreatePostInput {
  medias: [Float!] = []
  caption: String = ""
  rawCaption: String = ""
}

input UpdatePostInput {
  medias: [Float!] = []
  caption: String = ""
  rawCaption: String = ""
  id: Float!
}

type Subscription {
  onNewNotification(userId: Float!): Notification!
  onLikePost(postId: Float!): Like!
  onUnLikePost(postId: Float!): Like!
  onCreateComment(postId: Float!): Comments!
  onDeleteComment(postId: Float!): CommentDeletePayload!
}
